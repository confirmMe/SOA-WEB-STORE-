package com.taotao.sso.service.Impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.DigestUtils;

import com.taotao.common.pojo.TaotaoResult;
import com.taotao.common.utils.IDUtils;
import com.taotao.mapper.TbUserMapper;
import com.taotao.pojo.TbUser;
import com.taotao.pojo.TbUserExample;
import com.taotao.pojo.TbUserExample.Criteria;
import com.taotao.sso.service.UserService;
@Service
public class UserServiceImpl implements UserService {

 	@Autowired
    private TbUserMapper userMapper;
 	
 	//注册用户时对用户名和邮箱进行校验
	public TaotaoResult CheckUser( String param,Integer type) {
        TbUserExample example=new TbUserExample();
        Criteria criteria =example.createCriteria();
        
        if(type==1){
        	criteria.andUsernameEqualTo(param);
        }
        if(type==2){
        	criteria.andPhoneEqualTo(param);
        }
        if(type==3){
        	criteria.andEmailEqualTo(param);
        }
        List<TbUser> list= userMapper.selectByExample(example);
        if(list!=null&&list.size()>0){
        	//已经有数据存在，不可用
        	return TaotaoResult. ok(false);
        }else{
        	//没有数据存在，可用
        	return TaotaoResult.ok(true);
        }
	
	}

    //用户注册
	public TaotaoResult CreateUser(TbUser tbUser) {
		tbUser.setCreated(new Date());
		tbUser.setUpdated(new Date());
		tbUser.setPassword(DigestUtils.md5DigestAsHex(tbUser.getPassword().getBytes()));
		userMapper.insert(tbUser);
		return TaotaoResult.ok();
				
	}

	//用户登录
	public TaotaoResult Login(String username, String password) {
		TbUserExample example=new TbUserExample();
		Criteria criteria=example.createCriteria();
		criteria.andUsernameEqualTo(username);
		List<TbUser> list=userMapper.selectByExample(example);
		if(list.size()==0){
			return TaotaoResult.build(400, "没有此用户");
		}
		if(DigestUtils.md5DigestAsHex(password.getBytes())==list.get(0).getPassword()){
			Long token=IDUtils.getItemId();
			return TaotaoResult.ok(token);
		}
		else{
			return TaotaoResult.build(400, "密码错误")
		}
		return null;
	}
	

}
