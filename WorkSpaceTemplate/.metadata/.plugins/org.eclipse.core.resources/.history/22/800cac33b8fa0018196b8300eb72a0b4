package com.taotao.service.Impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.taotao.common.pojo.EUDataResult;
import com.taotao.common.pojo.ItemParamList;
import com.taotao.common.pojo.TaotaoResult;
import com.taotao.common.utils.IDUtils;
import com.taotao.common.utils.JsonUtils;
import com.taotao.mapper.TbItemCatMapper;
import com.taotao.mapper.TbItemDescMapper;
import com.taotao.mapper.TbItemMapper;
import com.taotao.mapper.TbItemParamItemMapper;
import com.taotao.mapper.TbItemParamMapper;
import com.taotao.pojo.TbItem;
import com.taotao.pojo.TbItemDesc;
import com.taotao.pojo.TbItemExample;
import com.taotao.pojo.TbItemParam;
import com.taotao.pojo.TbItemParamExample;
import com.taotao.pojo.TbItemParamExample.Criteria;
import com.taotao.pojo.TbItemParamItem;
import com.taotao.pojo.TbItemParamItemExample;
import com.taotao.service.ItemService;
 /**
  * 
  * <p>Title: ItemServiceImpl</p>
  * <p>Description: </p>
  * @author	阎述伟
  * @date	2018年12月6日上午9:13:51
  * @version 1.0
  */
@Service
public class ItemServiceImpl implements ItemService {
	@Autowired
    private TbItemMapper tbitemMapper;
	@Autowired
	private TbItemDescMapper descMapper;
	@Autowired
	private TbItemParamMapper itemParamMapper;	
	@Autowired
	private TbItemCatMapper catMapper;
	@Autowired
	private TbItemParamItemMapper  itemParamItemMapper;
	
	public EUDataResult getItemList(int page, int rows) {
		//获取商品列表
		TbItemExample example=new TbItemExample();
		PageHelper.startPage(page, rows);
		List<TbItem> list=tbitemMapper.selectByExample(example);
        
		EUDataResult dataResult=new EUDataResult();
		dataResult.setRows(list);
		
		PageInfo<TbItem> info=new PageInfo<>(list);
		dataResult.setTotal(info.getTotal());
 
		return dataResult;
	}
	public TaotaoResult addItem(TbItem item,String desc,String itemParams) throws Exception {
		//增加商品
		item.setId(IDUtils.getItemId());
		item.setCreated(new Date());
		item.setUpdated(new Date());
		item.setStatus((byte) 1);
		//商品信息1正常2下架3删除
		tbitemMapper.insert(item);
		
        //增加商品的描述信息，商品描述信息与商品的基本信息是分开存储的
		TbItemDesc record=new TbItemDesc();
    	record.setItemId(item.getId());
    	record.setItemDesc(desc);
    	record.setCreated(new Date());
    	record.setUpdated(new Date());
    	descMapper.insert(record);
    	
    	//添加商品的规格参数
        TbItemParamItem itemParamItem =new TbItemParamItem();
        itemParamItem.setId(IDUtils.getItemId());
        itemParamItem.setItemId(item.getId());
        itemParamItem.setParamData(itemParams);
        itemParamItem.setUpdated(new Date());
        itemParamItem.setCreated(new Date());
        
    	itemParamItemMapper.insert(itemParamItem);
    	
    	
		return TaotaoResult.ok();
	}
	@Override
	public EUDataResult getItemParam(int page, int rows) {
		//获取规格参数列表
		// TODO Auto-generated method stub
		TbItemParamExample example=new TbItemParamExample();
	    //设置分页插件
		PageHelper.startPage(page, rows);
		List<TbItemParam> list=itemParamMapper.selectByExampleWithBLOBs(example);//可以显示大文本对象
		List<ItemParamList> resultList=new ArrayList<ItemParamList>();
		for(TbItemParam test:list){
			ItemParamList itemParamList=new ItemParamList();
			itemParamList.setId(test.getId());
			itemParamList.setItemCatId(test.getItemCatId());
			itemParamList.setItemCatName(catMapper.selectByPrimaryKey(test.getItemCatId()).getName());
			itemParamList.setParamData(test.getParamData());
			itemParamList.setUpdated(test.getUpdated());
			itemParamList.setCreated(test.getCreated());
			resultList.add(itemParamList);
			
		}
		
		EUDataResult dataResult=new EUDataResult();
		//由于是对TbItemParam对象进行的分页条件查询。所以只能获取TbItemParam的分页信息
		//TbItemParam的数据条数与ItemParamList一致,Total信息无需改变
		PageInfo<TbItemParam> info=new PageInfo<>(list);
		dataResult.setTotal(info.getTotal());
		dataResult.setRows(resultList);
		return dataResult;
		
	}
	@Override
	public TaotaoResult showIsParam(Long itemCatId) {
		//判断此类商品是否已经增加类目类
		// TODO Auto-generated method stub
		TaotaoResult result=new TaotaoResult();
		TbItemParamExample example=new TbItemParamExample();
		Criteria criteria=example.createCriteria();
		criteria.andItemCatIdEqualTo(itemCatId);
		List<TbItemParam> list=itemParamMapper.selectByExampleWithBLOBs(example);
		if(list.isEmpty()){
			return result.ok();
		}
		return result.ok(list.get(0));
	}
	@Override
	public TaotaoResult addItemParam(Long itemCatId, String paramData) {
		//添加商品类目信息
		TbItemParam itemParam=new TbItemParam();
		itemParam.setId(IDUtils.getItemId());
		itemParam.setItemCatId(itemCatId);
		itemParam.setParamData(paramData);
		itemParam.setUpdated(new Date());
		itemParam.setCreated(new Date());
		itemParamMapper.insert(itemParam);
		return TaotaoResult.ok();
	}
	@SuppressWarnings("unchecked")
	@Override
	public String TestShowParam(Long itemId) {
		 
		// 根据商品id查询规格参数
		TbItemParamItemExample example = new TbItemParamItemExample();
		com.taotao.pojo.TbItemParamItemExample.Criteria criteria = example.createCriteria();
		criteria.andItemIdEqualTo(itemId);
		// 执行查询
		List<TbItemParamItem> list = itemParamItemMapper.selectByExampleWithBLOBs(example);
		if (list == null || list.size() == 0) {
			return "";
		}
		// 取规格参数信息
		TbItemParamItem itemParamItem = list.get(0);
		String paramData = itemParamItem.getParamData();
		// 生成html
		// 把规格参数json数据转换成java对象
		List<Map> jsonList = JsonUtils.jsonToList(paramData, Map.class);
		StringBuffer sb = new StringBuffer();
		sb.append("<table cellpadding=\"0\" cellspacing=\"1\" width=\"100%\" border=\"0\" class=\"Ptable\">\n");
		sb.append("    <tbody>\n");
		for (Map m1 : jsonList) {
			sb.append("        <tr>\n");
			sb.append("            <th class=\"tdTitle\" colspan=\"2\">" + m1.get("group") + "</th>\n");
			sb.append("        </tr>\n");
			List<Map> list2 = (List<Map>) m1.get("params");
			for (Map m2 : list2) {
				sb.append("        <tr>\n");
				sb.append("            <td class=\"tdTitle\">" + m2.get("k") + "</td>\n");
				sb.append("            <td>" + m2.get("v") + "</td>\n");
				sb.append("        </tr>\n");
			}
		}
		sb.append("    </tbody>\n");
		sb.append("</table>");
		return sb.toString();
	}
	@Override
	public TaotaoResult ShowDesc(Long id) {
		//在修改商品中回显描述数据
		
		TbItemDesc desc=  descMapper.selectByPrimaryKey(id);
		return TaotaoResult.ok(desc);
	}
	@Override
	public TaotaoResult ShowParam(Long id) {
		//在修改界面中回显商品规格信息
		TbItemParamItemExample example=new TbItemParamItemExample();
		com.taotao.pojo.TbItemParamItemExample.Criteria criteria =example.createCriteria();
		criteria.andItemIdEqualTo(id);
		List<TbItemParamItem> item=itemParamItemMapper.selectByExampleWithBLOBs(example);
		if(item!=null&&item.size()>0){
		//容错条件
		return TaotaoResult.ok(item.get(0));
		}else{
		return TaotaoResult.ok();
		}
	}
	@Override
	public TaotaoResult ItemUpdate(TbItem item, String desc, String itemParams, Long itemParamId) {
		//更改商品信息
		//更新商品表
	    item.setUpdated(new Date());
	    item.setStatus((byte) 1);
	    item.setCreated(tbitemMapper.selectByPrimaryKey(item.getId()).getCreated());
		tbitemMapper.updateByPrimaryKey(item);
		
		//更改商品描述表
		TbItemDesc itemDesc=new TbItemDesc();
		itemDesc.setCreated(descMapper.selectByPrimaryKey(item.getId()).getCreated());
		itemDesc.setUpdated(new Date());
		itemDesc.setItemId(item.getId());
		itemDesc.setItemDesc(desc);
		descMapper.updateByPrimaryKeyWithBLOBs(itemDesc);
		
		//更改商品规格信息
	    TbItemParamItem itemParamItem=new TbItemParamItem();
	    itemParamItem.setId(itemParamId);
	    itemParamItem.setItemId(item.getId());
	    itemParamItem.setParamData(itemParams);
	    itemParamItem.setCreated(itemParamItemMapper.selectByPrimaryKey(itemParamId).getCreated());
	    itemParamItem.setUpdated(new Date());
	    itemParamItemMapper.updateByPrimaryKeyWithBLOBs(itemParamItem);
		
		return TaotaoResult.ok();
	}
	@Override
	public TaotaoResult ItemDelete(List<Long> params) {
		//根据商品ID删除多个商品
		for(Long id:params){
		tbitemMapper.deleteByPrimaryKey(id);
		}
		return TaotaoResult.ok();
	}
	@Override
	public TaotaoResult ItemInstock(List<Long> params) {
		// 批量下架商品
		for(Long id:params){
			TbItem item=tbitemMapper.selectByPrimaryKey(id);
			item.setStatus((byte) 2);
			item.setUpdated(new Date());
			tbitemMapper.updateByPrimaryKey(item);
		}
		return TaotaoResult.ok();
	}
	@Override
	public TaotaoResult ItemReshelf(List<Long> params) {
		// 批量上架商品
		for(Long id:params){
			TbItem item=tbitemMapper.selectByPrimaryKey(id);
			item.setStatus((byte) 1);
			item.setUpdated(new Date());
			tbitemMapper.updateByPrimaryKey(item);
		}
		return TaotaoResult.ok();
	}
//	public TaotaoResult ItemParamDelete(List<Long> params) {
//		for(Long id:params){
//			itemParamMapper.deleteByPrimaryKey(id);
//			
//		    TbItemParamItemExample example=new TbItemParamItemExample();
//		    com.taotao.pojo.TbItemParamItemExample.Criteria criteria=example.createCriteria();
//		    criteria.and
//			itemParamItemMapper.selectByExampleWithBLOBs(example)
//		}
//		return null;
//	}
	

}
