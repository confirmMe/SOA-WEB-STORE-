package com.taotao.sso.service.Impl;

import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.DigestUtils;

import com.taotao.common.pojo.TaotaoResult;
import com.taotao.common.utils.CookieUtils;
import com.taotao.common.utils.IDUtils;
import com.taotao.common.utils.JsonUtils;
import com.taotao.mapper.TbUserMapper;
import com.taotao.pojo.TbUser;
import com.taotao.pojo.TbUserExample;
import com.taotao.pojo.TbUserExample.Criteria;
import com.taotao.sso.dao.JedisClient;
import com.taotao.sso.service.UserService;
@Service
public class UserServiceImpl implements UserService {

 	@Autowired
    private TbUserMapper userMapper;
 	@Autowired
 	private JedisClient jedisClient;
 	@Value("${USER_LOGIN_KEY}")
 	private String loginKey;
 	@Value("${USER_LOGIN_EXPIRE}")
 	private Integer expire;
 	@Value("${TOKEN}")
 	private String myToken;
 	//注册用户时对用户名和邮箱进行校验
	public TaotaoResult CheckUser( String param,Integer type) throws Exception{
        TbUserExample example=new TbUserExample();
        Criteria criteria =example.createCriteria();
        
        if(type==1){
        	criteria.andUsernameEqualTo(param);
        }
        if(type==2){
        	criteria.andPhoneEqualTo(param);
        }
        if(type==3){
        	criteria.andEmailEqualTo(param);
        }
        List<TbUser> list= userMapper.selectByExample(example);
        
        if(list!=null&&list.size()>0){
        	//已经有数据存在，不可用
        	return TaotaoResult. ok(false);
        }else{
        	//没有数据存在，可用
        	return TaotaoResult.ok(true);
        }
	
	}

    //用户注册
	public TaotaoResult CreateUser(TbUser tbUser) {
		tbUser.setCreated(new Date());
		tbUser.setUpdated(new Date());
		//将密码进行MD5加密
		tbUser.setPassword(DigestUtils.md5DigestAsHex(tbUser.getPassword().getBytes()));
		userMapper.insert(tbUser);
		return TaotaoResult.ok();
				
	}

	//用户登录
	public TaotaoResult Login(String username, String password,HttpServletRequest request,HttpServletResponse response) {
		TbUserExample example=new TbUserExample();
		Criteria criteria=example.createCriteria();
		criteria.andUsernameEqualTo(username);
		List<TbUser> list=userMapper.selectByExample(example);
		if(list.size()==0){
			return TaotaoResult.build(400, "没有此用户");
		}
		if(DigestUtils.md5DigestAsHex(password.getBytes()).equals(list.get(0).getPassword())){
			String token=UUID.randomUUID().toString();
			//由于需要将用户信息保存入jedis所以需要隐藏密码
			list.get(0).setPassword(null);
			//打印key的值
			System.out.println(loginKey+":"+token);
			//向redis中存储数据
			jedisClient.set(loginKey+":"+token, JsonUtils.objectToJson(list.get(0)));
			//设置数据的有效时间
			jedisClient.expire(loginKey+":"+token, expire);
			//将token写入cookie中，默认的有效期是关闭浏览器清除
			CookieUtils.setCookie(request, response, myToken, token);
			return TaotaoResult.ok(token);
		}
		else{
			return TaotaoResult.build(400, "密码错误");
		}
 
	}

	//根据token查询用户信息
	public TaotaoResult FindUserByToken(String param) {
		//控制台打印redis中存储的key
		String result=jedisClient.get(loginKey+":"+param);
		if(StringUtils.isBlank(result)){
			return TaotaoResult.build(400, "登录超时或没有登录");
		}
		//更新有效时间
		jedisClient.expire(loginKey+":"+param, expire);
		System.out.println(result);
		return TaotaoResult.ok(JsonUtils.jsonToPojo(result, TbUser.class));
	}

	//安全退出，删除Redis中对应的key
	public TaotaoResult logout(String token) {
		
		jedisClient.del(loginKey+":"+token);
		return TaotaoResult.ok();
	}
	

}
